/*
	From here: http://tomcopeland.blogs.com/EcmaScript.html (in BNF format).
	Adapted by fabriceleal.

	This is not a 100% fool-proof javascript grammar, but it's good enough for the job.
	Given some strict coding standards, it won't give any troubles.
*/

start				= Program

Program			= 
		WsNlStream ses:SourceElements
		{ return ses; }

SourceElements = 
		SourceElement*

SourceElement 	= 
		Comment / FunctionDeclaration / StatementWsNl

Comment = 
		"/*" value:(!"*/" .)* "*/" WsNlStream
		{ return { tag:"COMMENT", value:value.map(function(a){ return a.join('')}).join('')} }
	/	"//" value:(!Nl .)* (Nl WsNlStream)?
		{ return { tag:"COMMENT", value:value.map(function(a){ return a.join('')}).join('')} }

Statement 		= 
		Block / VariableStatement / EmptyStatement / LabelledStatement / 
		ReturnStatement / SwitchStatement / IfStatement  / 
		IterationStatement / ContinueStatement / BreakStatement / ImportStatement /
		WithStatement / ThrowStatement / TryStatement / ExpressionStatement


FunctionDeclaration =
		"function" WsNlStream id:VarDecl "(" WsNlStream pars:FormalParameterList? ")" WsNlStream body:FunctionBody ";"? WsNlStream
		{ return { tag:"functionDecl", name:id, pars:pars, body:body}; }

FunctionExpression =
		"function" WsNlStream id:VarDecl? "(" WsNlStream pars:FormalParameterList? ")" WsNlStream body:FunctionBody
		{ return { tag:"functionExpr", name:id, pars:pars, body:body}; }


FunctionBody =
		"{" WsNlStream code:SourceElements? "}" WsNlStream
		{ return { tag:"functionBody", code:code}; }

FormalParameterListTail =
		"," WsNlStream i:VarDecl
		{ return i; }

FormalParameterList =
		h:VarDecl t:FormalParameterListTail*
		{ return { tag:"formalParameterList", value:[h].concat(t)}; }

ExpressionStatement =
		e:Expression ";"? WsNlStream
		{ return { tag:"expression", value:e}; }

PrimaryExpression = 
		"this" WsNlStream
		{ return { tag:"thisRef" }; }
	/	FunctionExpression
	/ 	ObjectLiteral
	/ 	"(" WsNlStream e:Expression WsNlStream ")" WsNlStream
		{ return { tag:"parenthesis", expression: e }; }
	/ 	VarRef
	/ 	ArrayLiteral
	/ 	Literal

// Literals

DECIMAL_LITERAL = 
		d:DECIMAL_DIGIT+ WsNlStream
		{ return { tag:"number_literal", value:new Number(d.join(''))}; }

// I dont care about preserving hex literals. Do you? Pf! Just return a number!
HEX_INTEGER_LITERAL = 
		"0x" d:HEX_DIGIT+
		{ return { tag:"number_literal", value:new Number("0x" + d.join(''))}; }

STRING_LITERAL = 
		"'" a:(!"'" .)* "'" WsNlStream
		{ return { tag:"string_literal", value:a.map(function(e){return e.join('');}).join('')}; }
	/	"\"" a:(!"\"" .)* "\"" WsNlStream
		{ return { tag:"string_literal", value:a.map(function(e){return e.join('');}).join('')}; }

BOOLEAN_LITERAL = 
		"true"	WsNlStream
		{ return { tag:"bool_literal", value:true}; }
	/	"false"	WsNlStream
		{ return { tag:"bool_literal", value:false}; }

NULL_LITERAL = 
		"null" WsNlStream
		{ return { tag:"null_literal"}; }
	/	"undefined" WsNlStream
		{ return { tag:"null_literal"}; }

// TODO
REGULAR_EXPRESSION_LITERAL	= "blah"

// Identifiers
HEX_DIGIT						= [A-F0-9]
DECIMAL_DIGIT					= [0-9]
IDENTIFIER_NAME_CHAR			= IDENTIFIER_NAME_1ST_CHAR / DECIMAL_DIGIT
IDENTIFIER_NAME_1ST_CHAR	= [a-zA-Z_]
IDENTIFIER_NAME				= 
		h:IDENTIFIER_NAME_1ST_CHAR t:IDENTIFIER_NAME_CHAR*
		{ return [h].concat(t).join(''); }


LITERAL	= DECIMAL_LITERAL / HEX_INTEGER_LITERAL / STRING_LITERAL / BOOLEAN_LITERAL / NULL_LITERAL / REGULAR_EXPRESSION_LITERAL
Literal 	= 	
		l:LITERAL WsNlStream
		{ return { tag:"literal", value:l}; }

Identifier = 	
		i:IDENTIFIER_NAME WsNlStream
		{ return { tag:"id", name:i}; }

VarRef = 	
		i:IDENTIFIER_NAME WsNlStream
		{ return { tag:"ref", name:i}; }

VarDecl = 	
		i:IDENTIFIER_NAME WsNlStream
		{ return { tag:"decl", name:i}; }

ArrayLiteral = 	
	 	"[" l:ElementList "]"
		{ return { tag:"array_literal", value:l}; }
	/ 	"[" WsNlStream "]"
		{ return { tag:"array_literal", value:[]}; }

ElementListTail=
		"," WsNlStream e:ElementList WsNlStream
		{ return e; }
	
ElementList=
		head:AssignmentExpression WsNlStream tail:ElementListTail?
		{ 
			if(tail)
				return [head].concat(tail);
			else
				return [head];
		}

/*

TODO Support arrays like this: 
	[,,,3,4] = [,,,3,4]
	[1,2,,] = [1,2,]
	[1,2,,,5] = [1,2,,,5]

ArrayLiteral = 	
	 	"[" l:ElementList "]"
		{ return { tag:"array_literal", value:l}; }
	/ 	"[" WsNlStream "]"
		{ return { tag:"array_literal", value:[]}; }

ElementList = 	
		h:Elision? e:AssignmentExpression tail:ElementList?
		{ 
			var r = [];
			//console.log('h: ' + JSON.stringify(h));
			if(h && h.length > 1) {
				r = new Array(h.length);
			}
			r.push(e);
			if(tail) {
				r = r.concat(tail);
			}
			return r;
		}
	/	e:Elision
		{ 
			var r = new Array(e.length - 1);
			return r;
		}

Elision 	= 	
		","+
*/

ObjectLiteral 	= 	"{" WsNlStream ls:PropertyNameAndValueList? "}"
		{ return { tag:"object", value:ls}; }

PropertyNameAndValueListTail	=  
		"," WsNlStream p:PropertyNameAndValue
		{ return [p]; }
	/	"," WsNlStream
		{ return []; }

PropertyNameAndValueList 	= 	
		h:PropertyNameAndValue t:PropertyNameAndValueListTail*
		{ return Array.prototype.concat.apply([h], t); }
		
PropertyNameAndValue 	= 	
		key:PropertyName ":" WsNlStream value:AssignmentExpression
		{ return { tag:"objectSlot", key:key, value:value}; }

PropertyName 	= 	
		i:Identifier
		{ 
			// HACK
			return i.name; 
		}
	/ 	i:STRING_LITERAL
		{ 
			// HACK
			return i.value;
		}
	/ 	i:DECIMAL_LITERAL
		{ 
			// HACK
			return i.value;
		}

MemberExpression 	= 	
		head:( FunctionExpression / PrimaryExpression ) value:MemberExpressionPart*
		{ 
			if(value && value.length > 0)
				return { tag:"memberExpr", head: head, value:value}; 
			return head;
		}
	/ 	AllocationExpression

MemberExpressionForIn 	= 	
		head:( FunctionExpression / PrimaryExpression ) tail:MemberExpressionPart*
		{ 
			if(value && value.length > 0)
				return { tag:"memberExprForIn", head: head, value:value}; 
			return head;
		}

AllocationExpression 	= 	
		"new" head:MemberExpression tail:( Arguments MemberExpressionPart* )*
		{ return {tag :"allocation", head:head, tail:tail}; }

MemberExpressionPart 	= 	
		"[" WsNlStream e:Expression "]" WsNlStream
		{ return { tag:"memberExpressionPartOffset", value:e}; }
	/ 	"." WsNlStream id:Identifier
		{ return { tag:"memberExpressionPartDot", value: id}; }

CallExpression = 	head:(MemberExpression) args:Arguments rec:CallExpressionPart*
		{ return { tag:"call", head:head, args:args, rec:rec}; }

CallExpressionForIn = head:(MemberExpressionForIn) args:Arguments rec:CallExpressionPart*
		{ return { tag:"callForIn", head:head, args:args, rec:rec}; }

CallExpressionPart = 	
		a:Arguments
		{ return { tag:"callExpressionPartArgs", value:a }; }
	/ 	"[" WsNlStream e:Expression "]" WsNlStream
		{ return { tag:"callExpressionPartOffset", value:e }; }
	/ 	"." WsNlStream i:Identifier
		{ return { tag:"callExpressionPartDot", value:i}; }

Arguments = 
		"(" WsNlStream ")" WsNlStream
		{ return { tag:"arguments", value:undefined}; }
	/	"(" WsNlStream a:ArgumentList? ")" WsNlStream
		{ return { tag:"arguments", value:a}; }

ArgumentListTail	= 
		"," WsNlStream i:AssignmentExpression
		{ return i; }

ArgumentList = 
		h:AssignmentExpression t:ArgumentListTail*
		{ return [h].concat(t); }

LeftHandSideExpression 			= CallExpression / MemberExpression
LeftHandSideExpressionForIn 	= CallExpressionForIn / MemberExpressionForIn


PostfixExpression 			= 	
		head:LeftHandSideExpression tail:PostfixOperator?
		{ if(tail) return { tag:"postfix", head:head, tail:tail}; return head; }

PostfixOperator 				= 	"++" / "--"
UnaryExpression 				= 	
		PostfixExpression 
	/ (UnaryOperator UnaryExpression)+

UnaryOperator 					= 	"delete" / "void" / "typeof" / "++" / "--" / "+" / "-" / "~" / "!"

/*
	Multiplicative 
*/
MultiplicativeExpression 	= 	
		head:UnaryExpression tail:(MultiplicativeOperator WsNlStream MultiplicativeExpression)*
		{
			// if there is no tail, return immediatly the tail
			if(tail.length === 0)
				return head;

			// merge the head and the tail into a single flatten'ed array
			var all = [head];
			tail.forEach(function(a){ all = all.concat(a)});
			
			// Nest tails in the right operand of the add
			return (function _fold(t){
				var right = null;
				if(t.length <= 4) // 0: head (left operand), 1: operator, 2: whitespaces, 3:right operand
					right = t[3];
				else
					right = _fold(t.slice(4));

				return {	tag: "mult", left:t[0], op: t[1], right:right };
			})(all);
		}

MultiplicativeOperator 		= 	"*" / "/" / "%"

// Additive
AdditiveExpression 			= 
		head:MultiplicativeExpression tail:(AdditiveOperator WsNlStream AdditiveExpression)*
		{
			// if there is no tail, return immediatly the tail
			if(tail.length === 0)
				return head;

			// merge the head and the tail into a single flatten'ed array
			var all = [head];
			tail.forEach(function(a){ all = all.concat(a)});
			
			// Nest tails in the right operand of the add
			return (function _fold(t){
				var right = null;
				if(t.length <= 4) // 0: head (left operand), 1: operator, 2: whitespaces, 3:right operand
					right = t[3];
				else
					right = _fold(t.slice(4));

				return {	tag: "add", left:t[0], op: t[1], right:right };
			})(all);
		}

AdditiveOperator 				= 	"+" / "-"

// Shift
ShiftExpression 				= 	
		head:AdditiveExpression tail:(ShiftOperator WsNlStream ShiftExpression)*
		{
			// if there is no tail, return immediatly the tail
			if(tail.length === 0)
				return head;

			// merge the head and the tail into a single flatten'ed array
			var all = [head];
			tail.forEach(function(a){ all = all.concat(a)});
			
			// Nest tails in the right operand of the add
			return (function _fold(t){
				var right = null;
				if(t.length <= 4) // 0: head (left operand), 1: operator, 2: whitespaces, 3:right operand
					right = t[3];
				else
					right = _fold(t.slice(4));

				return {	tag: "shift", left:t[0], op: t[1], right:right };
			})(all);
		}

ShiftOperator 					= 	">>>" / "<<" / ">>"

// Relational
RelationalExpression 		= 	
		head:ShiftExpression tail:(RelationalOperator WsNlStream RelationalExpression)*
		{
			// if there is no tail, return immediatly the tail
			if(tail.length === 0)
				return head;

			// merge the head and the tail into a single flatten'ed array
			var all = [head];
			tail.forEach(function(a){ all = all.concat(a)});
			
			// Nest tails in the right operand of the add
			return (function _fold(t){
				var right = null;
				if(t.length <= 4) // 0: head (left operand), 1: operator, 2: whitespaces, 3:right operand
					right = t[3];
				else
					right = _fold(t.slice(4));

				return {	tag: "relational", left:t[0], op: t[1], right:right };
			})(all);
		}


RelationalOperator 			= 	"instanceof" / "in" / "<=" / ">=" / "<" / ">"

RelationalExpressionNoIn 	= 	
		head:ShiftExpression tail:(RelationalNoInOperator WsNlStream RelationalExpressionNoIn)*
		{
			// if there is no tail, return immediatly the tail
			if(tail.length === 0)
				return head;

			// merge the head and the tail into a single flatten'ed array
			var all = [head];
			tail.forEach(function(a){ all = all.concat(a)});
			
			// Nest tails in the right operand of the add
			return (function _fold(t){
				var right = null;
				if(t.length <= 4) // 0: head (left operand), 1: operator, 2: whitespaces, 3:right operand
					right = t[3];
				else
					right = _fold(t.slice(4));

				return {	tag: "relationalNoIn", left:t[0], op: t[1], right:right };
			})(all);
		}

RelationalNoInOperator 		= 	"instanceof" / "<=" / ">=" / "<" / ">"

/*
	EqualityExpression
*/
EqualityExpression 			= 	
		head:RelationalExpression tail:(EqualityOperator WsNlStream EqualityExpression)*
		{
			// if there is no tail, return immediatly the tail
			if(tail.length === 0)
				return head;

			// merge the head and the tail into a single flatten'ed array
			var all = [head];
			tail.forEach(function(a){ all = all.concat(a)});
			
			// Nest tails in the right operand of the add
			return (function _fold(t){
				var right = null;
				if(t.length <= 4) // 0: head (left operand), 1: operator, 2: whitespaces, 3:right operand
					right = t[3];
				else
					right = _fold(t.slice(4));

				return {	tag: "equality", left:t[0], op: t[1], right:right };
			})(all);
		}

/*
	EqualityExpressionNoIn
*/
EqualityExpressionNoIn 		= 	
		head:RelationalExpressionNoIn tail:(EqualityOperator WsNlStream EqualityExpressionNoIn)*
		{
			// if there is no tail, return immediatly the tail
			if(tail.length === 0)
				return head;

			// merge the head and the tail into a single flatten'ed array
			var all = [head];
			tail.forEach(function(a){ all = all.concat(a)});
			
			// Nest tails in the right operand of the add
			return (function _fold(t){
				var right = null;
				if(t.length <= 4) // 0: head (left operand), 1: operator, 2: whitespaces, 3:right operand
					right = t[3];
				else
					right = _fold(t.slice(4));

				return {	tag: "equalityNoIn", left:t[0], op: t[1], right:right };
			})(all);
		}

EqualityOperator 				= 	"===" / "!==" / "==" / "!="


BitwiseANDExpression 		= 	
		head:EqualityExpression tail:(BitwiseANDOperator WsNlStream BitwiseANDExpression)*
		{
			// if there is no tail, return immediatly the tail
			if(tail.length === 0)
				return head;

			// merge the head and the tail into a single flatten'ed array
			var all = [head];
			tail.forEach(function(a){ all = all.concat(a)});
			
			// Nest tails in the right operand of the add
			return (function _fold(t){
				var right = null;
				if(t.length <= 4) // 0: head (left operand), 1: operator, 2: whitespaces, 3:right operand
					right = t[3];
				else
					right = _fold(t.slice(4));

				return {	tag: "bitAnd", left:t[0], op: t[1], right:right };
			})(all);
		}


BitwiseANDExpressionNoIn 	= 	
		head:EqualityExpressionNoIn tail:(BitwiseANDOperator WsNlStream BitwiseANDExpressionNoIn)*
		{
			// if there is no tail, return immediatly the tail
			if(tail.length === 0)
				return head;

			// merge the head and the tail into a single flatten'ed array
			var all = [head];
			tail.forEach(function(a){ all = all.concat(a)});
			
			// Nest tails in the right operand of the add
			return (function _fold(t){
				var right = null;
				if(t.length <= 4) // 0: head (left operand), 1: operator, 2: whitespaces, 3:right operand
					right = t[3];
				else
					right = _fold(t.slice(4));

				return {	tag: "bitAndNoIn", left:t[0], op: t[1], right:right };
			})(all);
		}


BitwiseANDOperator 			= 	"&"


BitwiseXORExpression 		= 	
		head:BitwiseANDExpression tail:(BitwiseXOROperator WsNlStream BitwiseXORExpression)*
		{
			// if there is no tail, return immediatly the tail
			if(tail.length === 0)
				return head;

			// merge the head and the tail into a single flatten'ed array
			var all = [head];
			tail.forEach(function(a){ all = all.concat(a)});
			
			// Nest tails in the right operand of the add
			return (function _fold(t){
				var right = null;
				if(t.length <= 4) // 0: head (left operand), 1: operator, 2: whitespaces, 3:right operand
					right = t[3];
				else
					right = _fold(t.slice(4));

				return {	tag: "bitXor", left:t[0], op: t[1], right:right };
			})(all);
		}


BitwiseXORExpressionNoIn 	= 	
		head:BitwiseANDExpressionNoIn tail:(BitwiseXOROperator WsNlStream BitwiseXORExpressionNoIn)*
		{
			// if there is no tail, return immediatly the tail
			if(tail.length === 0)
				return head;

			// merge the head and the tail into a single flatten'ed array
			var all = [head];
			tail.forEach(function(a){ all = all.concat(a)});
			
			// Nest tails in the right operand of the add
			return (function _fold(t){
				var right = null;
				if(t.length <= 4) // 0: head (left operand), 1: operator, 2: whitespaces, 3:right operand
					right = t[3];
				else
					right = _fold(t.slice(4));

				return {	tag: "bitXorNoIn", left:t[0], op: t[1], right:right };
			})(all);
		}


BitwiseXOROperator 			= 	"^"


BitwiseORExpression 			= 	
		head:BitwiseXORExpression tail:(BitwiseOROperator WsNlStream BitwiseORExpression)*
		{
			// if there is no tail, return immediatly the tail
			if(tail.length === 0)
				return head;

			// merge the head and the tail into a single flatten'ed array
			var all = [head];
			tail.forEach(function(a){ all = all.concat(a)});
			
			// Nest tails in the right operand of the add
			return (function _fold(t){
				var right = null;
				if(t.length <= 4) // 0: head (left operand), 1: operator, 2: whitespaces, 3:right operand
					right = t[3];
				else
					right = _fold(t.slice(4));

				return {	tag: "bitOr", left:t[0], op: t[1], right:right };
			})(all);
		}


BitwiseORExpressionNoIn 	= 	
		head:BitwiseXORExpressionNoIn tail:(BitwiseOROperator WsNlStream BitwiseORExpressionNoIn)*
		{
			// if there is no tail, return immediatly the tail
			if(tail.length === 0)
				return head;

			// merge the head and the tail into a single flatten'ed array
			var all = [head];
			tail.forEach(function(a){ all = all.concat(a)});
			
			// Nest tails in the right operand of the add
			return (function _fold(t){
				var right = null;
				if(t.length <= 4) // 0: head (left operand), 1: operator, 2: whitespaces, 3:right operand
					right = t[3];
				else
					right = _fold(t.slice(4));

				return {	tag: "bitOrNoIn", left:t[0], op: t[1], right:right };
			})(all);
		}

BitwiseOROperator 			= 	"|"


// LogicalAND

LogicalANDExpression 		= 	
		left:BitwiseORExpression op:LogicalANDOperator WsNlStream right:LogicalANDExpression
		{ return { tag:"and", left:left, op:op, right:right}; }
	/	BitwiseORExpression

LogicalANDExpressionNoIn 	= 	
		left:BitwiseORExpressionNoIn op:LogicalANDOperator WsNlStream right:LogicalANDExpressionNoIn
		{ return { tag:"andNoIn", left:left, op:op, right:right}; }
	/	BitwiseORExpressionNoIn

LogicalANDOperator 			= 	"&&"


// LogicalOR
LogicalORExpression 			= 	
		left:LogicalANDExpression op:LogicalOROperator WsNlStream right:LogicalORExpression
		{ return { tag:"or", left:left, op:op, right:right}; }
	/	LogicalANDExpression

LogicalORExpressionNoIn 	= 	
		left:LogicalANDExpressionNoIn op:LogicalOROperator WsNlStream right:LogicalORExpressionNoIn
		{ return { tag:"orNoIn", left:left, op:op, right:right}; }
	/	LogicalANDExpressionNoIn

LogicalOROperator 			= 	"||"


// Conditional Expression
ConditionalExpressionTail  = "?" WsNlStream ctrue:AssignmentExpression ":" WsNlStream cfalse:AssignmentExpression
		{ return { ctrue: ctrue, cfalse: cfalse }; }
ConditionalExpression 		= 	e:LogicalORExpression t:ConditionalExpressionTail?
		{
			if(t){
				return { tag:"conditionalExpression", expression:e, seq:t };
			}
			return e;
		}

// Conditional Expression NoIn
ConditionalExpressionNoInTail =  "?" WsNlStream ctrue:AssignmentExpression /* FIXME? not NoIn here??? */ ":" WsNlStream cfalse: AssignmentExpressionNoIn
		{ return { ctrue: ctrue, cfalse: cfalse }; }
ConditionalExpressionNoIn 	= 	e:LogicalORExpressionNoIn t:ConditionalExpressionNoInTail?
		{
			if(t){
				return { tag:"conditionalExpressionNoIn", expression:e, seq:t };
			}
			return e;
		}

// Assignment
AssignmentExpression 		= 	
		l:LeftHandSideExpression op:AssignmentOperator WsNlStream r:AssignmentExpression 
		{ return { tag:"assignment", left:l, operator:op, right:r}; }
	/ 	ConditionalExpression

AssignmentExpressionNoIn 	= 	
		l:LeftHandSideExpression op:AssignmentOperator WsNlStream r:AssignmentExpressionNoIn 
		{ return { tag:"assignmentNoIn", left:l, operator:op, right:r}; }
	/	ConditionalExpressionNoIn

AssignmentOperator 			= 	"*=" / "/=" / "%=" / "+=" / "-=" / "<<=" / ">>=" / ">>>=" / "<<<=" / "&=" / "^=" / "/=" / "="

// ...
Expression 	= 	
		head:AssignmentExpression tail:("," WsNlStream AssignmentExpression)* 
		{
			// if there is no tail, return immediatly the tail
			if(tail.length === 0)
				return head;

			// merge the head and the tail into a single flatten'ed array
			var all = [head];
			tail.forEach(function(a){ all = all.concat(a); });
			
			// Nest tails in the right operand of the add
			return (function _fold(t){
				var right = null;
				if(t.length <= 4) // 0: head (left operand), 1: operator, 2: whitespaces, 3:right operand
					right = t[3];
				else
					right = _fold(t.slice(4));

				return {	tag: "comma", left:t[0], op: t[1], right:right };
			})(all);
		}

ExpressionNoIn 	= 	
		head:AssignmentExpressionNoIn tail:( "," WsNlStream AssignmentExpressionNoIn )*
		{
			// if there is no tail, return immediatly the tail
			if(tail.length === 0)
				return head;

			// merge the head and the tail into a single flatten'ed array
			var all = [head];
			tail.forEach(function(a){ all = all.concat(a)});
			
			// Nest tails in the right operand of the add
			return (function _fold(t){
				var right = null;
				if(t.length <= 4) // 0: head (left operand), 1: operator, 2: whitespaces, 3:right operand
					right = t[3];
				else
					right = _fold(t.slice(4));

				return {	tag: "commaNoIn", left:t[0], op: t[1], right:right };
			})(all);
		}

StatementWsNl = s:Statement WsNlStream
		{ return s; }

Block = 
		"{" WsNlStream l:StatementList? "}" WsNlStream
		{ return { tag:"block", value:l}; }

StatementList 	= 	
		ss:StatementWsNl+
		{ return { tag:"statementList", value:ss}; }

VariableStatement 	= 	
		"var " WsNlStream l:VariableDeclarationList ";"? WsNlStream
		{ return {tag:"varStatement", value:l}; }

// VariableDeclarationList
VariableDeclarationListTail=
		"," WsNlStream i:VariableDeclaration
		{ return i; }
VariableDeclarationList =
		h:VariableDeclaration t:VariableDeclarationListTail*
		{ return [h].concat(t); }

// VariableDeclarationListNoIn
VariableDeclarationListNoInTail=
		"," WsNlStream i:VariableDeclarationNoIn
		{ return i;}
VariableDeclarationListNoIn = 
		h:VariableDeclarationNoIn t:VariableDeclarationListNoInTail*
		{ return [h].concat(t); }

// VariableDeclaration*
VariableDeclaration 	= 	
		id:VarDecl init:Initialiser
		{ return { tag:"declaration", name:id, init:init}; }
	/	id:VarDecl
		{ return { tag:"declaration", name:id, init:undefined}; }

VariableDeclarationNoIn = 
		id:VarDecl init:InitialiserNoIn
		{ return { tag:"declarationNoIn", name:id, init:init}; }
	/	id:VarDecl
		{ return { tag:"declarationNoIn", name:id, init:undefined}; }

// Initialiser*
Initialiser 	= 	
		"=" WsNlStream e:AssignmentExpression
		{ return { tag:"initialiser", value:e}; }

InitialiserNoIn 	= 	
		"=" WsNlStream e:AssignmentExpressionNoIn
		{ return { tag:"initialiserNoIn", value:e}; }

EmptyStatement 	= 	WsNlStream ";" WsNlStream
		{ return { tag:"empty"}; }

IfStatement 	= 	
		"if" WsNlStream "(" WsNlStream e:Expression ")" WsNlStream truebr:StatementWsNl "else" WsNlStream falsebr:StatementWsNl
		{ return { tag:"if", condition:e, truebr:truebr, falsebr:falsebr}; }
	/	"if" WsNlStream "(" WsNlStream e:Expression ")" WsNlStream truebr:StatementWsNl
		{ return { tag:"if", condition:e, truebr:truebr, falsebr:null}; }

IterationStatement 	= 	
		"do" WsNlStream StatementWsNl "while" WsNlStream "(" WsNlStream Expression ")" WsNlStream  (";" WsNlStream)? 
	/ 	"while" WsNlStream "(" WsNlStream Expression ")" WsNlStream StatementWsNl
	/ 	"for" WsNlStream "(" WsNlStream ExpressionNoIn? ";" WsNlStream Expression? ";" WsNlStream Expression? ")" WsNlStream StatementWsNl
	/ 	"for" WsNlStream "(" WsNlStream "var" WsNlStream VariableDeclarationList ";" WsNlStream Expression? ";" WsNlStream Expression? ")" WsNlStream StatementWsNl
	/ 	"for" WsNlStream "(" WsNlStream "var" WsNlStream VariableDeclarationNoIn "in" WsNlStream Expression ")" WsNlStream StatementWsNl
	/ 	"for" WsNlStream "(" WsNlStream LeftHandSideExpressionForIn "in" WsNlStream Expression ")" WsNlStream StatementWsNl

ContinueStatement = 	
		"continue" WsNlStream id:Identifier? (";" WsNlStream)?
		{ return { tag: "continue", id:id}; }

BreakStatement 	= 	
		"break" WsNlStream id:Identifier? (";" WsNlStream)?
		{ return { tag: "break", id:id}; }

ReturnStatement 	= 	
		"return" WsNlStream e:Expression? (";" WsNlStream)?
		{ return { tag:"return", value:e }; }

WithStatement 		= 	
		"with" WsNlStream "(" WsNlStream e:Expression ")" WsNlStream s:StatementWsNl
		{ return { tag:"with", expression:e, code:s }; }

SwitchStatement 	= 	
		"switch" WsNlStream "(" WsNlStream e:Expression ")" WsNlStream c:CaseBlock
		{ return { tag:"switch", expression:e, cases:c }; }

CaseBlockTail = 
		"}" WsNlStream
		{ return []; }
	/	h:DefaultClause t:CaseClauses? "}" WsNlStream
		{ return [h].concat(t); }
	

CaseBlock 	= 	"{" WsNlStream h:CaseClauses? t:CaseBlockTail
		{ return h.concat(t); }


CaseClauses 	= 	CaseClause+
		
CaseClause 	= 	"case" WsNlStream e:Expression ":" WsNlStream code:StatementList?
		{ return { tag:"caseClause", code:code}; }

DefaultClause 	= 	"default" WsNlStream ":"  WsNlStream code:StatementList?
		{ return { tag:"defaultClause", code:code}; }

LabelledStatement = 	
		i:Identifier ":" s:StatementWsNl
		{ return { tag:"labelled", id:i, statement:s}; }

ThrowStatement	=
		"throw" e:Expression ";"?
		{ return { tag:"throw", value:e}; }

TryStatement 	= 	
		"try" WsNlStream b:Block c:Catch f:Finally
		{ return { tag:"try", block:b, catchBlock:c, 	finallyBlock:f};    }
	/	"try" WsNlStream b:Block f:Finally
		{ return { tag:"try", block:b, catchBlock:null, finallyBlock:f}; 	  }
	/	"try" WsNlStream b:Block c:Catch
		{ return { tag:"try", block:b, catchBlock:c, 	finallyBlock:null}; }

Catch 	=
		"catch" WsNlStream "(" WsNlStream i:VarDecl ")" WsNlStream b:Block
		{ return { tag:"catch", id:i, block:b}; }

Finally 	=
		"finally" WsNlStream b:Block
		{ return { tag:"finally", block:b}; }


ImportStatement = "import" name:Name ( "." "*" )? ";"
		{ return { tag:"import", value:name }; }

NameTail="." t:IDENTIFIER_NAME
		{ return t; }

Name 	= 	h:IDENTIFIER_NAME t:NameTail*
		{ return { tag:"name", value:[h].concat(t)}; }

//JScriptVarStatement 	= 	"var " JScriptVarDeclarationList ( ";" )?
//JScriptVarDeclarationList 	= 	JScriptVarDeclaration ( "," JScriptVarDeclaration )*
//JScriptVarDeclaration 	= 	Identifier ":" IDENTIFIER_NAME ( Initialiser )?


WsNlStream=WsNl*
WsNl= Ws / Nl
Ws = [ \w\t]
Nl = "\r" / "\n" / "\r\n"

